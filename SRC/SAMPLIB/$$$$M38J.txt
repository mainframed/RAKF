              RAKF 1.2.0 Usage Considerations for MVS 3.8j
              ============================================

The implementation of calls to the security system in MVS 3.8j to
protect datasets greatly relies on the concept of indication: Only
datasets having their "RACF indicator" set on are reliably protected.
The RACF indicator is a bit in the type 1 DSCB of a none VSAM dataset
or in the catalog entry of a VSAM object. Once activated RAKF ensures
that all newly created datasets, catalogs and VSAM objects have their
RACF indicator turned on. But this is typically not the case for
already existing ones. So it is strongly recommended to manually
turn the RACF indicator on for all datasets, catalogs and VSAM objects
that already existed before RAKF activation. It should also be noted
that once the whole system is RAKF protected (i.e. the RACF indicator
is on for all datasets, catalogs and VSAM objects) it is no longer
feasible to run it without RAKF being active as most accesses will then
be denied.

First time users of RAKF might have a problem instantly RACF indicating
all datasets in the system. Also there might be users needing to protect
only none VSAM datasets (i.e. don't need catalog and/or VSAM object
protection). For those users a set of ZAPs to the MVS modules handling
none VSAM datasets is provided that enforce calls to RAKF for all none
VSAM datasets, not only for those with RACF indicator turned on. So the
easiest way to get some basic protection on the system is to simply
install RAKF together with the MVS ZAPs and you're all set.

It should be noted, however, that this constitutes a massive change of logic
flow in the modules ZAPed. There exist complex interactions between VSAM
catalog management and the DADSM functions modified by the ZAPs. So, while
intensive testing has shown that these ZAPs together with correctly defined RAKF
DATASET and DASDVOL profiles provide reliable protection for none VSAM datasets,
they partly break VSAM catalog management. An artefact of this situation is
that with applied ZAPs an IDCAMS "DELETE CLUSTER" command of a VSAM cluster that
hasn't been allocated with the SUBAL option ends with CC=0 but leaves the data
and index dataspaces of this cluster orphaned on disk. Phil Roberts has found
a workaround which allows to delete these orphaned VSAM components from disk
which is cited here to help in case this problem occured:

Phil wrote:

"I have tinkered some and have a work around for the situation where a
VSAM dataset may get orphaned due to a mixed environment. It doesn't
take any outside utilities.

Basically if a VSAM cluster is deleted while running with the MVSZAPs
(not recommened operation but perhaps necessary for some) one can:

- DELETE hlq.vsam.name NOSCR
- CDSCB hlq.vsam.name.data DSORG(PS) VOL(xxxxxx) RACF
- CDSCB hlq.vsam.name.index DSORG(PS) VOL(xxxxxx) RACF
- RPF 3.4 with hlq and VOL xxxxxx to C CATALOG then D to delete the
  orphaned components from pack xxxxxx"

This example illustrates why it is strongly recommended to use the
MVS ZAPs only temporary, during a phase while working to RACF indicate
the whole system, and to remove them as soon as possible.

The following table gives an overview on the influence of the ZAPs in a few
scenarios and should help to decide whether to use them or not:

                                     -------------------------------------
                                     ! All datasets  !                   !
                                     ! VSAM objects  ! System has mixed  !
                                     ! and catalogs  ! indication status !
                                     ! are indicated !                   !
                                     !---------------!-------------------!
                                     !       !       !  VSAM  !  NVSAM   !
                                     !       !       !-------------------!
                                     ! VSAM  ! NVSAM !  i ! n !  i ! n   !
                                     !       !       !  n ! o !  n ! o   !
                                     !       !       !  d ! t !  d ! t   !
-------------------------------------!-------!-------!----!---!----!-----!
!      ! Reliable protection         !   Y   !   Y   !  Y ! N !  Y ! Y   !
!    Z !-----------------------------!-------!-------!----!---!----!-----!
!    A ! Reliable catalog management !   N   !   Y   !  N ! N !  Y ! Y   !
!    P !-----------------------------!-------!-------!----!---!----!-----!
!      ! Catalog protection          !   Y   !   Y   !  Y ! N !  Y ! N   !
-------------------------------------!-------!-------!----!---!----!-----!
!      ! Reliable protection         !   Y   !   Y   !  Y ! N !  N ! N   !
!    Z !-----------------------------!-------!-------!----!---!----!-----!
! No A ! Reliable catalog management !   Y   !   Y   !  Y ! Y !  Y ! Y   !
!    P !-----------------------------!-------!-------!----!---!----!-----!
!      ! Catalog protection          !   Y   !   Y   !  Y ! N !  Y ! N   !
--------------------------------------------------------------------------

It should be noted that in a mixed environment without ZAPs even indicated
none VSAM datasets aren't reliably protected, that's not a typo! The table
shows clearly that one should by all means try to reach the "not ZAPed and
fully indicated" configuration because this is the only one to provide full
protection without introducing risky changes to basic system functionality.

The following steps describe the installation and removal of the MVS ZAPs:

1. Run job LPABACK: In step 2 you'll ZAP MVS modules IFG0194A,
   IGC0002I, IGC00030 and IGG0553A. These modules are typically located
   in SYS1.LPALIB but they might also be elsewhere in LPALIST or
   LINKLIST. Job LPABACK copies these modules and their aliases to a
   backup library... just in case you want to revert to the non-ZAPed
   versions later. Find out where these modules reside on your system
   and change SYS1.LPALIB in job LPABACK to the name of that library.
   If you want to use another name for the backup library than
   RAKF.LPALIB.BACKUP then change that name too at the location
   indicated by a comment in the JCL. Then submit the job and check
   that the library has been created correctly. It should contain 4
   members and 17 aliases.

2. Run job ZAPMVS38: This job applies the MVS ZAPs. If necessary
   change the //SYSLIB DD statement to the name of the library where
   IFG0194A, IGC0002I, IGC00030 and IGG0553A reside. If module
   IFG0194A has already been ZAPed as recommended in Phil D's
   original rakf.pdf installation procedure then comment out the 6 ZAP
   statements indicated by the respective comment in the job. Run the
   job and verify that the ZAPs where successful.

   If any of the ZAPs failed your system isn't at a service level
   compatible with the ZAPs. The ZAPs were tested with the following
   PTF levels of the ZAPed modules:

   o IFG0194A PTF UZ74083
   o IGC0002I PTF UZ68267
   o IGC00030 PTF UZ63439
   o IGG0553A PTF UZ63439

   This is the level of Volker's Turnkey 3 system. If you're using
   other PTF levels most probably the ZAPs need to be reworked to
   reflect at least the correct addresses of the ZAPed instructions.

   After having run job ZAPMVS38 successfully your system is ready to
   use with RAKF 1.2.0 for basic none VSAM dataset protection.

3. Restore job LPAREST: If you want to remove the MVS ZAPs... job
   LPAREST copies the modules backed up in step 1 by job LPABACK back
   to their original locations. If you adjusted dataset names in
   LPABACK make analogous changes in LPAREST before running it. Please
   note that Phil D's original OPEN processing ZAP is still applied
   after running LPAREST if it was already applied before running
   LPABACK. So, if you want to get rid of that ZAP too which is strongly
   recommended, you need to find another source to restore IFG0194A and
   it's aliases from (hopefully you backed them up before applying Phil D's
   ZAP).

Finally it should be emphasized that although RAKF now works mostly as it is
supposed to the protection of your system is only as good as your resource
profile definitions are. Consult the RAKF 1.7 manuals for details; Phil R
has kindly scanned SPL: RACF SC28-1343-2 and posted it to the H390-MVS
Yahoo group at http://tech.groups.yahoo.com/group/H390-MVS/message/11648.
This manual provides a good insight on how RACF was supposed to work at
that time and RAKF now behaves mostly the same way. Member $$$$$DOC is a good
source of information on RAKF's ressource definition logic which is still the
same as it was with the ESG Security system.

Special attention should be given to the fact that RAKF allows ALTER
access to all undefined resources. Thus, for example, a user can delete any
dataset on any volume even if access NONE is defined for the dataset as
long as there is no DASDVOL profile defined: ALTER access to a DASD allows
scratching of any file on it regardless of the file's protection and
exactly that's what a user gets if no DASDVOL is defined.
